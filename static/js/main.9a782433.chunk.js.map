{"version":3,"sources":["store/actions/mainActions.js","components/Login.js","components/Invite.js","App.js","serviceWorker.js","store/reducers/mainReducer.js","index.js"],"names":["universalApiCaller","url","method","data","fetch","mode","headers","body","JSON","stringify","ApiFailure","response","console","log","statusText","connect","dispatch","login","getState","then","ok","type","json","a","props","useState","userName","password","form","setForm","formError","setFormError","changeHandler","event","target","name","value","validateForm","validateAry","Object","keys","map","key","element","reduce","c","v","className","placeholder","onChange","e","onClick","sendInvite","status","email","mobile","inviteForm","setInviteForm","inviteFormError","setInviteFormError","inviteeList","setinviteeList","inviteeListTemplate","item","index","RemoveItem","newList","filter","currentIndex","length","AddToList","inviteListWithIndex","addIndex","state","main","activeView","setActiveComponent","Boolean","window","location","hostname","match","initState","mainReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9a782433.chunk.js","sourcesContent":["export const universalApiCaller = function ({ url, method, data}) {\r\n  return fetch(url, {\r\n    method: method,\r\n    mode: 'cors',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(data) })\r\n}\r\n\r\nexport const ApiFailure = function (response) {\r\n  console.log(response.statusText)\r\n}\r\n\r\nexport const login = function(data) {\r\n  return (dispatch, getState) => {\r\n    console.log('data sent- ', JSON.stringify(data));\r\n    universalApiCaller('http//:test.kruntummy.com/apii/login/', 'POST', data)\r\n    .then(response => {\r\n      console.log(\"response\", response);\r\n      if (response.ok) {\r\n        dispatch({type: 'LOGIN_SUCCESS'})\r\n      }\r\n      else {\r\n        ApiFailure(response)\r\n      }\r\n      return response.json()\r\n    })\r\n    .then(a => {\r\n      console.log('API DATA -', a);\r\n    })\r\n  }\r\n}\r\nexport const sendInvite = function(data) {\r\n  return (dispatch, getState) => {\r\n    console.log('data sent- ', JSON.stringify(data));\r\n    universalApiCaller('http://test.kruntummy.com/apii/accounts/send_invitation/', 'POST', data)\r\n    .then(response => {\r\n      console.log(\"response\", response);\r\n      if (response.status === 200 ) {\r\n        dispatch({type: 'INVITE_SENT'})\r\n      }\r\n      else {\r\n        ApiFailure(response)\r\n      }\r\n      return response.json()\r\n    })\r\n    .then(a => {\r\n      console.log('API DATA invite -', a);\r\n    })\r\n  }\r\n}","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { login } from '../store/actions/mainActions';\r\n\r\nconst Login = function(props) {\r\n  const [form, setForm] = useState({\r\n    userName: \"\",\r\n    password: \"\",\r\n    // userName: \"testuser1\",\r\n    // password: \"Kruntummy$1\",\r\n  })\r\n  const [formError, setFormError] = useState({\r\n    userName: \"\",\r\n    password: \"\",\r\n  })\r\n\r\n  const changeHandler = event => {\r\n    setForm({\r\n      ...form,\r\n      [event.target.name]: event.target.value,\r\n    })\r\n    setFormError({\r\n      ...formError,\r\n      [event.target.name]: ''\r\n    })\r\n  }\r\n\r\n  const emptyCheck = (element) => {\r\n    if (!form[element]) {\r\n      setFormError({\r\n        ...formError,\r\n        [element]: `It cannot be empty`\r\n      })\r\n      return true;\r\n    }\r\n    return false\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let validateAry = Object.keys(form).map(key => {\r\n      if (emptyCheck(key)) return false;\r\n      return true;\r\n    })\r\n    console.log(\" apppu - \", formError);\r\n    validateAry.reduce((c, v) => c && v) && props.login(form)\r\n    return true;\r\n  }\r\n\r\n  return <>\r\n    <div className=\"login-wrapper\">\r\n      <input type=\"text\" name=\"userName\" className=\"userName\" placeholder={ formError.userName || \"Username\" } onChange={ e => {changeHandler(e)} } value={ form.userName }/>\r\n      <input type=\"password\" name=\"password\" className={ formError.password || \"Password\" } placeholder=\"Password\" onChange={ e => changeHandler(e) } value={ form.password }/>\r\n      <button onClick={ () => validateForm() }>Login</button>\r\n    </div>\r\n  </>\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    login: (data) => dispatch(login(data))\r\n  } \r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { sendInvite } from '../store/actions/mainActions';\r\n\r\nconst Invite = function (props) {\r\n  const [inviteForm, setInviteForm] = useState({\r\n    email: '',\r\n    mobile: '',\r\n  });\r\n  const [inviteFormError, setInviteFormError] = useState({\r\n    email: '',\r\n    mobile: '',\r\n  });\r\n  const [inviteeList, setinviteeList] = useState([\r\n  ]);\r\n\r\n  const inviteeListTemplate = inviteeList.map((item, index) => <div className=\"list-item\">\r\n    <span className=\"eamil\">\r\n      Email: { item.email }\r\n    </span>\r\n    <span className=\"mobile\">\r\n      Mobile: { item.mobile }\r\n    </span>\r\n    <button onClick={ () => RemoveItem(index) }>Remove</button>\r\n  </div>)\r\n\r\n  const changeHandler = event => {\r\n    setInviteForm({\r\n      ...inviteForm,\r\n      [event.target.name]: event.target.value,\r\n    })\r\n    setInviteFormError({\r\n      ...inviteFormError,\r\n      [event.target.name]: ''\r\n    })\r\n  }\r\n\r\n  const emptyCheck = (element) => {\r\n    if (!inviteForm[element]) {\r\n      setInviteFormError({\r\n        ...inviteFormError,\r\n        [element]: `It cannot be empty`\r\n      })\r\n      return true;\r\n    }\r\n    return false\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let validateAry = Object.keys(inviteForm).map(key => {\r\n      if (emptyCheck(key)) return false;\r\n      return true;\r\n    })\r\n    console.log(\" apppu - \", inviteFormError);\r\n    return validateAry.reduce((c, v) => c && v);\r\n  }\r\n\r\n\r\n  const AddToList = () => {\r\n    if (!validateForm()) return false;\r\n    setinviteeList([\r\n      ...inviteeList,\r\n      {\r\n        ...inviteForm,\r\n        index: inviteeList.length,\r\n      }\r\n    ])\r\n    setInviteForm({\r\n      email: \"\",\r\n      mobile: \"\",\r\n    });\r\n    // console.log(\"inviteeList\", inviteeList);\r\n  }\r\n\r\n  const RemoveItem = index => {\r\n    const newList = inviteeList.filter((value, currentIndex) => currentIndex !== index);\r\n    setinviteeList(newList);\r\n  }\r\n\r\n  const addIndex = () => {\r\n    const inviteListWithIndex = inviteeList.map((item, index) => {\r\n      return {\r\n        ...item,\r\n        index\r\n      }\r\n    })\r\n    props.sendInvite(inviteListWithIndex);\r\n    setinviteeList([]);\r\n  }\r\n\r\n  return <>\r\n    <div className=\"invite-wrapper\">\r\n      <div>\r\n        <div className=\"inviter-adder\">\r\n          <input type=\"text\" name=\"email\" className=\"email\" placeholder={ inviteFormError.email || \"Email\" } onChange={ e => { changeHandler(e) } } value={ inviteForm.email } />\r\n          <input type=\"text\" name=\"mobile\" className=\"mobile\" placeholder={ inviteFormError.mobile || \"Mobile Number\" } onChange={ e => { changeHandler(e) } } value={ inviteForm.mobile }/>\r\n          <button onClick={ () => AddToList() }>Add</button>\r\n        </div>\r\n        <div className=\"invitee-list\">\r\n          { inviteeListTemplate }\r\n        </div>\r\n      </div>\r\n      <button onClick={ () => addIndex() }>Send Invite</button>\r\n    </div>\r\n\r\n\r\n  </>\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    sendInvite: (data) => dispatch(sendInvite(data))\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Invite);","import React from 'react';\nimport './App.scss';\nimport Login from './components/Login';\nimport { connect } from 'react-redux';\nimport Invite from './components/Invite';\n\nfunction App(props) {\n  const setActiveComponent = () => {\n    switch (props.main.activeView) {\n      case 'login':\n        return <Login />\n      case 'invite':\n        return <Invite />\n      default:\n        return <Login />\n    }\n  }\n\n  return (<>\n\n    <div className=\"background-main\"></div>\n    <div className=\"background-shine obtuse\"></div>\n    <div className=\"background-shine acute\"></div>\n    <main>\n      { setActiveComponent() }\n    </main>\n    </>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    main: state\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n  activeView: 'login',\r\n}\r\n\r\nconst mainReducer = function (state = initState, action) {\r\n  switch (action.type) {\r\n    case 'LOGIN_SUCCESS':\r\n      console.log(\"LOGIN_SUCCESS\");\r\n      return {\r\n        ...state,\r\n        activeView: 'invite'\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default mainReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport mainReducer from './store/reducers/mainReducer';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(mainReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}